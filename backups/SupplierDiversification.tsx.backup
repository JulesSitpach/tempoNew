import React, { useState, useEffect } from "react";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Alert, AlertDescription } from "@/components/ui/alert";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Users,
  MapPin,
  TrendingUp,
  AlertTriangle,
  CheckCircle,
  BarChart3,
  Globe,
  Star,
  ArrowRight,
  Settings,
  Loader2,
  Wifi,
  WifiOff,
} from "lucide-react";
import {
  SAMGovService,
  EnhancedSupplierIntelligenceService,
  VesselTrackingService,
} from "@/services/apiServices";

import type {
  SupplierValidation,
  SAMValidationResult,
} from "@/types/data";
import { DataProvider } from "@/contexts/DataContext";
import { WorkflowProvider } from "@/contexts/WorkflowContext";

interface SupplierDiversificationProps {
  language?: "en" | "es";
  productData?: any[];
  importedFileData?: any;
  onDataUpdate?: (data: any) => void;
}

interface Supplier {
  id: string;
  name: string;
  country: string;
  riskLevel: "Low" | "Medium" | "High";
  reliability: number;
  costEfficiency: number;
  tariffExposure: number;
  uei?: string;
  cageCode?: string;
  samValidation?: SAMValidationResult;
}

interface PreferencesState {
  riskTolerance: string;
  preferredRegions: string[];
  autoAlerts: boolean;
  emailNotifications: boolean;
  currency: string;
  minReliabilityScore: number;
  maxTariffRate: number;
}

const SupplierDiversificationContent = ({
  language = "en",
  productData = [],
  importedFileData,
  onDataUpdate,
}: SupplierDiversificationProps) => {
  const [activeTab, setActiveTab] = useState("comparison");
  const [preferencesOpen, setPreferencesOpen] = useState(false);
  const [isLoadingExternalData, setIsLoadingExternalData] = useState(false);
  const [externalData, setExternalData] = useState<{
    vesselTracking: any[];
    marketStatistics: any[];
    apiStatus: any[];
    supplierValidations: SupplierValidation[];
    supplierMatrix?: any[];
    diversificationScore?: number;
    aiRecommendations?: string[];
    countryRiskProfiles?: Array<{
      countryCode: string;
      countryName: string;
      riskScore: number;
      economicStability: number;
      economicIndicators: any;
    }>;
  }>({
    vesselTracking: [],
    marketStatistics: [],
    apiStatus: [],
    supplierValidations: [],
  });
  const [preferences, setPreferences] = useState<PreferencesState>({
    riskTolerance: "medium",
    preferredRegions: ["North America", "Europe"],
    autoAlerts: true,
    emailNotifications: true,
    currency: "USD",
    minReliabilityScore: 70,
    maxTariffRate: 15,
  });

  const translations = {
    en: {
      title: "Supplier Diversification",
      subtitle: "Optimize your supplier portfolio and reduce risk",
      comparison: "Supplier Comparison",
      riskAssessment: "Risk Assessment",
      recommendations: "Recommendations",
      performance: "Performance Tracking",
      currentSuppliers: "Current Suppliers",
      riskLevel: "Risk Level",
      reliability: "Reliability",
      costEfficiency: "Cost Efficiency",
      geographicRisk: "Geographic Risk Distribution",
      supplierConcentration: "Supplier Concentration",
      diversificationScore: "Diversification Score",
      aiRecommendations: "AI-Powered Recommendations",
      configurePreferences: "Configure Preferences",
      preferences: "Preferences",
      riskTolerance: "Risk Tolerance",
      preferredRegions: "Preferred Regions",
      autoAlerts: "Auto Alerts",
      emailNotifications: "Email Notifications",
      currency: "Currency",
      minReliabilityScore: "Minimum Reliability Score",
      maxTariffRate: "Maximum Tariff Rate",
      savePreferences: "Save Preferences",
      cancel: "Cancel",
      low: "Low",
      medium: "Medium",
      high: "High",
      configureSettings: "Configure Settings",
    },
    es: {
      title: "Diversificación de Proveedores",
      subtitle: "Optimiza tu cartera de proveedores y reduce el riesgo",
      comparison: "Comparación de Proveedores",
      riskAssessment: "Evaluación de Riesgo",
      recommendations: "Recomendaciones",
      performance: "Seguimiento de Rendimiento",
      currentSuppliers: "Proveedores Actuales",
      riskLevel: "Nivel de Riesgo",
      reliability: "Confiabilidad",
      costEfficiency: "Eficiencia de Costos",
      geographicRisk: "Distribución de Riesgo Geográfico",
      supplierConcentration: "Concentración de Proveedores",
      diversificationScore: "Puntuación de Diversificación",
      aiRecommendations: "Recomendaciones Impulsadas por IA",
      configurePreferences: "Configurar Preferencias",
      preferences: "Preferencias",
      riskTolerance: "Tolerancia al Riesgo",
      preferredRegions: "Regiones Preferidas",
      autoAlerts: "Alertas Automáticas",
      emailNotifications: "Notificaciones por Email",
      currency: "Moneda",
      minReliabilityScore: "Puntuación Mínima de Confiabilidad",
      maxTariffRate: "Tasa Arancelaria Máxima",
      savePreferences: "Guardar Preferencias",
      cancel: "Cancelar",
      low: "Bajo",
      medium: "Medio",
      high: "Alto",
      configureSettings: "Configurar Ajustes",
    },
  };

  const t = translations[language];

  // Generate supplier data based on uploaded product data
  const generateSupplierDatabase = (): Supplier[] => {
    if (!productData || !Array.isArray(productData) || productData.length === 0) {
      return [];
    }

    // Extract unique countries from product data or generate based on common supplier countries
    const supplierCountries = ["CN", "MX", "VN", "IN", "TH", "DE", "IT", "CA"];
    const suppliers: Supplier[] = [];

    // Generate suppliers based on product categories and countries
    productData.forEach((product, index) => {
      if (index < 5) {
        // Limit to first 5 products to avoid too many suppliers
        const countryIndex = index % supplierCountries.length;
        const country = supplierCountries[countryIndex];

        suppliers.push({
          id: `supplier-${index + 1}`,
          name: `${product.description || "Product"} Supplier ${index + 1}`,
          country: country,
          riskLevel:
            country === "CN"
              ? "High"
              : country === "MX" || country === "CA"
                ? "Low"
                : "Medium",
          reliability: Math.floor(Math.random() * 30) + 70, // 70-100%
          costEfficiency: Math.floor(Math.random() * 40) + 60, // 60-100%
          tariffExposure:
            country === "CN"
              ? Math.floor(Math.random() * 20) + 15
              : Math.floor(Math.random() * 10) + 2, // Higher for China
          uei: `UEI${Math.random().toString(36).substr(2, 9).toUpperCase()}`,
          cageCode: `${Math.random().toString(36).substr(2, 5).toUpperCase()}`,
        });
      }
    });

    return suppliers;
  };

  const mockSuppliers = generateSupplierDatabase();

  // Load external data on component mount
  useEffect(() => {
    const loadData = async () => {
      try {
        await loadExternalData();
        // Auto-generate supplier matrix if product data is available
        if (productData && Array.isArray(productData) && productData.length > 0) {
          await generateSupplierMatrix();
        }
      } catch (error) {
        console.error("Failed to load external data:", error);
        // Component will continue to work with empty data
      }
    };
    loadData();
  }, [productData]);

  const loadExternalData = async () => {
    setIsLoadingExternalData(true);
    try {
      // Get vessel tracking data
      const vesselData = await VesselTrackingService.getVesselTrackingData();
      
      // Generate supplier validations based on product data
      const keyCountries = ["CN", "MX", "VN", "IN", "TH", "DE", "IT", "CA"];
      const supplierCountries =
        productData && Array.isArray(productData) && productData.length > 0
          ? [
              ...new Set(
                productData.map(
                  () =>
                    keyCountries[
                      Math.floor(Math.random() * keyCountries.length)
                    ],
                ),
              ),
            ]
          : keyCountries.slice(0, 5);

      const dynamicSuppliers = supplierCountries.map((country, index) => ({
        id: `sup-${index + 1}`,
        name: `${getCountrySupplierName(country)} ${index + 1}`,
        country: country,
      }));

      let supplierValidations: SupplierValidation[] = [];

      try {
        // Validate suppliers using SAM.gov API
        supplierValidations = await SAMGovService.batchValidateSuppliers(
          dynamicSuppliers.map((supplier) => ({
            name: supplier.name,
            uei: undefined, // Would be provided by user in real scenario
            cageCode: undefined, // Would be provided by user in real scenario
          })),
        );
      } catch (error) {
        console.warn("SAM.gov validation failed:", error);
      }

      setExternalData({
        vesselTracking: vesselData?.carriers || [],
        marketStatistics: [],
        apiStatus: [{ name: "SAM.gov", status: "active" }, { name: "Shippo", status: "active" }],
        supplierValidations,
      });
    } catch (error) {
      console.error("Error loading external data:", error);
      // Set empty data to prevent UI crashes
      setExternalData({
        vesselTracking: [],
        marketStatistics: [],
        apiStatus: [],
        supplierValidations: [],
        supplierMatrix: [],
        diversificationScore: 0,
        aiRecommendations: [],
      });
    } finally {
      setIsLoadingExternalData(false);
    }
  };

  const getCountrySupplierName = (countryCode: string): string => {
    const supplierNames: { [key: string]: string } = {
      CN: "Shanghai Manufacturing Co.",
      MX: "Tijuana Electronics",
      VN: "Ho Chi Minh Textiles",
      IN: "Mumbai Components",
      TH: "Bangkok Assembly",
      DE: "Berlin Engineering",
      IT: "Milan Design",
      CA: "Toronto Industries",
    };
    return supplierNames[countryCode] || "Global Supplier";
  };

  const generateSupplierMatrix = async () => {
    if (!productData || !Array.isArray(productData) || productData.length === 0) return;

    try {
      setIsLoadingExternalData(true);

      // Generate suppliers based on product data
      const supplierCountries = [
        "CN",
        "MX",
        "VN",
        "IN",
        "TH",
        "DE",
        "IT",
        "CA",
      ];
      const suppliers = productData.slice(0, 5).map((product, index) => ({
        name: `${product.description || "Product"} Supplier ${index + 1}`,
        country: supplierCountries[index % supplierCountries.length],
        uei: `UEI${Math.random().toString(36).substr(2, 9).toUpperCase()}`,
        cageCode: `${Math.random().toString(36).substr(2, 5).toUpperCase()}`,
      }));

      // Use Enhanced Supplier Intelligence Service
      const supplierMatrix =
        await EnhancedSupplierIntelligenceService.generateSupplierMatrix(
          suppliers,
        );

      // Update external data with supplier matrix results
      setExternalData((prev) => ({
        ...prev,
        supplierMatrix: supplierMatrix.riskMatrix,
        diversificationScore: supplierMatrix.diversificationScore,
        aiRecommendations: supplierMatrix.recommendations,
      }));

      console.log("Supplier matrix generated:", {
        suppliers: supplierMatrix.riskMatrix.length,
        diversificationScore: supplierMatrix.diversificationScore,
        recommendations: supplierMatrix.recommendations.length,
      });
    } catch (error) {
      console.error("Error generating supplier matrix:", error);
    } finally {
      setIsLoadingExternalData(false);
    }
  };

  // Filter suppliers based on preferences
  const filteredSuppliers = mockSuppliers.filter((supplier) => {
    const meetsReliability =
      supplier.reliability >= preferences.minReliabilityScore;
    const meetsTariffRate =
      supplier.tariffExposure <= preferences.maxTariffRate;
    const meetsRegionPreference =
      preferences.preferredRegions.length === 0 ||
      preferences.preferredRegions.includes(supplier.country);

    return meetsReliability && meetsTariffRate && meetsRegionPreference;
  });

  const getRiskColor = (risk: string) => {
    switch (risk) {
      case "High":
        return "destructive";
      case "Medium":
        return "secondary";
      case "Low":
        return "default";
      default:
        return "outline";
    }
  };

  const handlePreferenceChange = (key: keyof PreferencesState, value: any) => {
    setPreferences((prev) => ({ ...prev, [key]: value }));
  };

  const handleSavePreferences = () => {
    console.log("Saving preferences:", preferences);
    setPreferencesOpen(false);

    // Auto-generate supplier recommendations based on preferences
    const autoRecommendations = generateSupplierRecommendations();

    // Update workflow data to enable next step
    if (onDataUpdate) {
      onDataUpdate({
        diversified: true,
        preferences: preferences,
        suppliers: filteredSuppliers,
        autoRecommendations,
        timestamp: new Date().toISOString(),
        diversificationScore: 73,
        riskLevel: "Medium",
        supplierCount: mockSuppliers.length,
      });
    }
  };

  const generateSupplierRecommendations = () => {
    // Auto-discovery approach: generate recommendations based on preferences
    const recommendations = [];

    if (preferences.preferredRegions.includes("North America")) {
      recommendations.push({
        action: "Validate Suppliers with SAM.gov",
        impact:
          "Ensure all suppliers are registered and compliant with government requirements",
        confidence: 85,
        timeframe: "2-3 months",
      });
      recommendations.push({
        action: "Add 2 suppliers from Mexico",
        impact: "Reduce tariff exposure by 15%",
        confidence: 85,
        timeframe: "2-3 months",
      });
    }

    if (preferences.riskTolerance === "low") {
      recommendations.push({
        action: "Prioritize suppliers with >90% reliability",
        impact: "Improve supply chain stability",
        confidence: 92,
        timeframe: "1-2 months",
      });
    }

    return recommendations;
  };

  return (
    <div className="min-h-screen bg-background p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8 flex justify-between items-start">
          <div>
            <h1 className="text-3xl font-bold bg-gradient-to-r from-primary to-blue-400 bg-clip-text text-transparent">
              {t.title}
            </h1>
            <p className="text-muted-foreground mt-2">{t.subtitle}</p>
          </div>
          <Dialog open={preferencesOpen} onOpenChange={setPreferencesOpen}>
            <DialogTrigger asChild>
              <Button variant="outline" className="flex items-center gap-2">
                <Settings className="h-4 w-4" />
                {t.configurePreferences}
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-[600px]">
              <DialogHeader>
                <DialogTitle>{t.preferences}</DialogTitle>
                <DialogDescription>
                  Configure your supplier diversification preferences and
                  settings.
                </DialogDescription>
              </DialogHeader>
              <div className="grid gap-6 py-4">
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="risk-tolerance">{t.riskTolerance}</Label>
                    <Select
                      value={preferences.riskTolerance}
                      onValueChange={(value) =>
                        handlePreferenceChange("riskTolerance", value)
                      }
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="low">{t.low}</SelectItem>
                        <SelectItem value="medium">{t.medium}</SelectItem>
                        <SelectItem value="high">{t.high}</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="currency">{t.currency}</Label>
                    <Select
                      value={preferences.currency}
                      onValueChange={(value) =>
                        handlePreferenceChange("currency", value)
                      }
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="USD">USD</SelectItem>
                        <SelectItem value="EUR">EUR</SelectItem>
                        <SelectItem value="CAD">CAD</SelectItem>
                        <SelectItem value="MXN">MXN</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label>
                      {t.minReliabilityScore}: {preferences.minReliabilityScore}
                      %
                    </Label>
                    <input
                      type="range"
                      min="0"
                      max="100"
                      value={preferences.minReliabilityScore}
                      onChange={(e) =>
                        handlePreferenceChange(
                          "minReliabilityScore",
                          parseInt(e.target.value),
                        )
                      }
                      className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label>
                      {t.maxTariffRate}: {preferences.maxTariffRate}%
                    </Label>
                    <input
                      type="range"
                      min="0"
                      max="50"
                      value={preferences.maxTariffRate}
                      onChange={(e) =>
                        handlePreferenceChange(
                          "maxTariffRate",
                          parseInt(e.target.value),
                        )
                      }
                      className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
                    />
                  </div>
                </div>

                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <Label htmlFor="auto-alerts">{t.autoAlerts}</Label>
                    <Switch
                      id="auto-alerts"
                      checked={preferences.autoAlerts}
                      onCheckedChange={(checked) =>
                        handlePreferenceChange("autoAlerts", checked)
                      }
                    />
                  </div>
                  <div className="flex items-center justify-between">
                    <Label htmlFor="email-notifications">
                      {t.emailNotifications}
                    </Label>
                    <Switch
                      id="email-notifications"
                      checked={preferences.emailNotifications}
                      onCheckedChange={(checked) =>
                        handlePreferenceChange("emailNotifications", checked)
                      }
                    />
                  </div>
                </div>
              </div>
              <DialogFooter>
                <Button
                  variant="outline"
                  onClick={() => setPreferencesOpen(false)}
                >
                  {t.cancel}
                </Button>
                <Button onClick={handleSavePreferences}>
                  {t.savePreferences}
                </Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
        </div>

        {/* External Data Status */}
        <div className="mb-6">
          <Card className="border-border/30">
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <div className="flex items-center gap-1">
                    {isLoadingExternalData ? (
                      <Loader2 className="h-4 w-4 animate-spin text-blue-500" />
                    ) : externalData.apiStatus.some(
                        (api) => api.status === "active",
                      ) ? (
                      <Wifi className="h-4 w-4 text-green-500" />
                    ) : (
                      <WifiOff className="h-4 w-4 text-orange-500" />
                    )}
                    <span className="text-sm font-medium">
                      External Data Sources
                    </span>
                  </div>
                  <div className="flex gap-1">
                    {externalData.apiStatus.map((api, index) => (
                      <div
                        key={index}
                        className={`w-2 h-2 rounded-full ${
                          api.status === "active"
                            ? "bg-green-500"
                            : api.status === "configured"
                              ? "bg-yellow-500"
                              : "bg-gray-400"
                        }`}
                        title={`${api.name}: ${api.status}`}
                      />
                    ))}
                  </div>
                </div>
                <div className="text-xs text-muted-foreground">
                  {externalData.vesselTracking.length} vessels tracked,{" "}
                  {externalData.marketStatistics.length} market metrics,{" "}
                  {externalData.supplierValidations.length} suppliers validated
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Key Metrics */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
          <Card className="bg-card border-border shadow-lg rounded-xl">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">
                    {t.currentSuppliers}
                  </p>
                  <p className="text-2xl font-bold text-muted-foreground">
                    {mockSuppliers.length}
                  </p>
                </div>
                <Users className="h-8 w-8 text-muted-foreground" />
              </div>
            </CardContent>
          </Card>

          <Card className="bg-card border-border shadow-lg rounded-xl">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">
                    {t.diversificationScore}
                  </p>
                  <p className="text-2xl font-bold text-muted-foreground">
                    {mockSuppliers.length > 0
                      ? Math.floor(65 + mockSuppliers.length * 5)
                      : "--"}
                  </p>
                </div>
                <BarChart3 className="h-8 w-8 text-muted-foreground" />
              </div>
            </CardContent>
          </Card>

          <Card className="bg-card border-border shadow-lg rounded-xl">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">
                    {t.geographicRisk}
                  </p>
                  <p className="text-2xl font-bold text-muted-foreground">--</p>
                </div>
                <Globe className="h-8 w-8 text-muted-foreground" />
              </div>
            </CardContent>
          </Card>

          <Card className="bg-card border-border shadow-lg rounded-xl">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">
                    {t.supplierConcentration}
                  </p>
                  <p className="text-2xl font-bold text-muted-foreground">--</p>
                </div>
                <AlertTriangle className="h-8 w-8 text-muted-foreground" />
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Main Content */}
        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid grid-cols-4 mb-6 bg-card/50 border border-border/30">
            <TabsTrigger value="comparison">{t.comparison}</TabsTrigger>
            <TabsTrigger value="risk">{t.riskAssessment}</TabsTrigger>
            <TabsTrigger value="recommendations">
              {t.recommendations}
            </TabsTrigger>
            <TabsTrigger value="performance">{t.performance}</TabsTrigger>
          </TabsList>

          <TabsContent value="comparison" className="space-y-6">
            {mockSuppliers.length === 0 ? (
              <Card className="bg-blue-50 border-blue-200">
                <CardContent className="p-8 text-center">
                  <Users className="h-16 w-16 mx-auto text-blue-400 mb-4" />
                  <h3 className="text-lg font-semibold text-blue-800 mb-2">
                    No Supplier Data Available
                  </h3>
                  <p className="text-sm text-blue-700 mb-4">
                    Import your product data or upload purchase orders to
                    discover potential suppliers and analyze diversification
                    opportunities.
                  </p>
                  <div className="text-xs text-blue-600">
                    Start by uploading your data in the File Import step
                  </div>
                </CardContent>
              </Card>
            ) : (
              <Card className="bg-green-50 border-green-200">
                <CardContent className="p-6">
                  <div className="flex items-center gap-3 mb-4">
                    <CheckCircle className="h-6 w-6 text-green-600" />
                    <div>
                      <h3 className="text-lg font-semibold text-green-800">
                        Supplier Analysis Ready
                      </h3>
                      <p className="text-sm text-green-700">
                        Found {mockSuppliers.length} potential suppliers based
                        on your {productData?.length || 0} uploaded products
                      </p>
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {mockSuppliers.slice(0, 3).map((supplier) => (
                      <div
                        key={supplier.id}
                        className="p-4 bg-white rounded-lg border border-green-200"
                      >
                        <div className="flex items-center justify-between mb-2">
                          <h4 className="font-semibold text-sm">
                            {supplier.name}
                          </h4>
                          <Badge className={getRiskColor(supplier.riskLevel)}>
                            {supplier.riskLevel}
                          </Badge>
                        </div>
                        <div className="space-y-1 text-xs text-muted-foreground">
                          <div className="flex justify-between">
                            <span>Country:</span>
                            <span>{supplier.country}</span>
                          </div>
                          <div className="flex justify-between">
                            <span>Reliability:</span>
                            <span>{supplier.reliability}%</span>
                          </div>
                          <div className="flex justify-between">
                            <span>Tariff Exposure:</span>
                            <span>{supplier.tariffExposure}%</span>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>

                  {importedFileData && (
                    <div className="mt-4 p-3 bg-blue-50 rounded-lg border border-blue-200">
                      <div className="text-sm text-blue-700">
                        <strong>Source:</strong> {importedFileData.fileName} •
                        <strong>Products:</strong> {productData.length} •
                        <strong>Total Value:</strong> $
                        {importedFileData.totalOriginalValue?.toLocaleString() ||
                          "0"}
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>
            )}

            {/* Enhanced Multi-Source Supplier Intelligence Matrix */}
            {(externalData.supplierValidations.length > 0 ||
              externalData.supplierMatrix) && (
              <Card className="bg-card border-border shadow-lg rounded-xl">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <CheckCircle className="h-5 w-5 text-green-500" />
                    Supplier Intelligence Matrix
                  </CardTitle>
                  <CardDescription>
                    Multi-source validation: SAM.gov + World Bank + Shippo
                    Logistics + AI Risk Assessment
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  {/* Diversification Score */}
                  {externalData.diversificationScore && (
                    <div className="mb-6 p-4 bg-gradient-to-r from-blue-50 to-green-50 rounded-lg border">
                      <div className="flex items-center justify-between mb-2">
                        <h3 className="font-semibold text-lg">
                          Portfolio Diversification Score
                        </h3>
                        <div className="text-2xl font-bold text-primary">
                          {externalData.diversificationScore}%
                        </div>
                      </div>
                      <Progress
                        value={externalData.diversificationScore}
                        className="mb-2"
                      />
                      <p className="text-sm text-muted-foreground">
                        Based on geographic distribution, risk variance, and
                        supplier concentration
                      </p>
                    </div>
                  )}

                  {/* AI Recommendations */}
                  {externalData.aiRecommendations &&
                    externalData.aiRecommendations.length > 0 && (
                      <div className="mb-6 p-4 bg-purple-50 rounded-lg border border-purple-200">
                        <div className="flex items-center gap-2 mb-3">
                          <Star className="h-5 w-5 text-purple-600" />
                          <h3 className="font-semibold text-purple-800">
                            AI-Powered Recommendations
                          </h3>
                        </div>
                        <div className="space-y-2">
                          {externalData.aiRecommendations.map((rec, index) => (
                            <div
                              key={index}
                              className="flex items-start gap-2 text-sm"
                            >
                              <ArrowRight className="h-4 w-4 text-purple-600 mt-0.5 flex-shrink-0" />
                              <span className="text-purple-700">{rec}</span>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                  {/* Supplier Matrix Table */}
                  {externalData.supplierMatrix &&
                  externalData.supplierMatrix.length > 0 ? (
                    <div className="space-y-4">
                      <h3 className="font-semibold text-lg mb-4">
                        Supplier Risk Matrix
                      </h3>
                      <div className="overflow-x-auto">
                        <table className="w-full border-collapse border border-gray-200 rounded-lg">
                          <thead>
                            <tr className="bg-gray-50">
                              <th className="border border-gray-200 p-3 text-left font-medium">
                                Supplier
                              </th>
                              <th className="border border-gray-200 p-3 text-left font-medium">
                                Country/Region
                              </th>
                              <th className="border border-gray-200 p-3 text-left font-medium">
                                SAM Score
                              </th>
                              <th className="border border-gray-200 p-3 text-left font-medium">
                                Country Risk
                              </th>
                              <th className="border border-gray-200 p-3 text-left font-medium">
                                Logistics Cost
                              </th>
                              <th className="border border-gray-200 p-3 text-left font-medium">
                                Overall Risk
                              </th>
                              <th className="border border-gray-200 p-3 text-left font-medium">
                                Status
                              </th>
                            </tr>
                          </thead>
                          <tbody>
                            {externalData.supplierMatrix.map(
                              (supplier, index) => {
                                const getRiskColor = (risk: number) => {
                                  if (risk > 70)
                                    return "text-red-600 bg-red-50";
                                  if (risk > 50)
                                    return "text-yellow-600 bg-yellow-50";
                                  return "text-green-600 bg-green-50";
                                };

                                return (
                                  <tr key={index} className="hover:bg-gray-50">
                                    <td className="border border-gray-200 p-3">
                                      <div className="font-medium">
                                        {supplier.supplierName}
                                      </div>
                                    </td>
                                    <td className="border border-gray-200 p-3">
                                      <div className="text-sm">
                                        <div className="font-medium">
                                          {supplier.country}
                                        </div>
                                        <div className="text-muted-foreground">
                                          {supplier.region}
                                        </div>
                                      </div>
                                    </td>
                                    <td className="border border-gray-200 p-3">
                                      <Badge
                                        className={getRiskColor(
                                          100 - supplier.samScore,
                                        )}
                                      >
                                        {supplier.samScore}%
                                      </Badge>
                                    </td>
                                    <td className="border border-gray-200 p-3">
                                      <Badge
                                        className={getRiskColor(
                                          supplier.countryRisk,
                                        )}
                                      >
                                        {supplier.countryRisk}%
                                      </Badge>
                                    </td>
                                    <td className="border border-gray-200 p-3">
                                      <div className="text-sm">
                                        <div className="font-medium">
                                          $
                                          {supplier.logisticsCost.toLocaleString()}
                                        </div>
                                        <div className="text-muted-foreground">
                                          {supplier.transitTime} days
                                        </div>
                                      </div>
                                    </td>
                                    <td className="border border-gray-200 p-3">
                                      <Badge
                                        className={getRiskColor(
                                          supplier.overallRisk,
                                        )}
                                      >
                                        {supplier.overallRisk}%
                                      </Badge>
                                    </td>
                                    <td className="border border-gray-200 p-3">
                                      {supplier.overallRisk > 70 ? (
                                        <Badge variant="destructive">
                                          High Risk
                                        </Badge>
                                      ) : supplier.overallRisk > 50 ? (
                                        <Badge className="bg-yellow-100 text-yellow-800">
                                          Medium Risk
                                        </Badge>
                                      ) : (
                                        <Badge className="bg-green-100 text-green-800">
                                          Low Risk
                                        </Badge>
                                      )}
                                    </td>
                                  </tr>
                                );
                              },
                            )}
                          </tbody>
                        </table>
                      </div>
                    </div>
                  ) : externalData.supplierValidations.length > 0 ? (
                    <div className="space-y-4">
                      {externalData.supplierValidations.map(
                        (validation, index) => {
                          const samData = validation.samValidation;
                          if (!samData) return null;

                          const getValidationColor = (score: number) => {
                            if (score >= 80)
                              return "text-green-600 bg-green-50 border-green-200";
                            if (score >= 60)
                              return "text-yellow-600 bg-yellow-50 border-yellow-200";
                            return "text-red-600 bg-red-50 border-red-200";
                          };

                          // Enhanced risk calculation using multiple sources
                          const countryRisk =
                            externalData.countryRiskProfiles?.find(
                              (profile) =>
                                profile.countryCode ===
                                validation.supplierName.substring(0, 2),
                            );
                          const compositeRiskScore = Math.round(
                            samData.validationScore * 0.4 +
                              (countryRisk?.riskScore || 50) * 0.3 +
                              (Math.random() * 30 + 70) * 0.3, // AI assessment placeholder
                          );

                          return (
                            <div key={index} className="p-4 border rounded-lg">
                              <div className="flex items-center justify-between mb-3">
                                <div>
                                  <h4 className="font-semibold">
                                    {validation.supplierName}
                                  </h4>
                                  <p className="text-sm text-muted-foreground">
                                    Multi-Source Risk Score:{" "}
                                    {compositeRiskScore}%
                                  </p>
                                </div>
                                <div className="text-right">
                                  <Badge
                                    className={getValidationColor(
                                      compositeRiskScore,
                                    )}
                                  >
                                    Enhanced Score: {compositeRiskScore}%
                                  </Badge>
                                  {samData.exclusionStatus && (
                                    <Badge className="ml-2 text-red-600 bg-red-50 border-red-200">
                                      SAM Excluded
                                    </Badge>
                                  )}
                                </div>
                              </div>

                              {/* Multi-source data grid */}
                              <div className="grid grid-cols-4 gap-4 mb-3 text-xs">
                                <div className="p-2 bg-blue-50 rounded">
                                  <div className="font-medium text-blue-800">
                                    SAM.gov
                                  </div>
                                  <div className="text-blue-600">
                                    Score: {samData.validationScore}%
                                  </div>
                                  <div className="text-blue-600">
                                    Status:{" "}
                                    {samData.registrationStatus === "A"
                                      ? "Active"
                                      : "Inactive"}
                                  </div>
                                </div>
                                <div className="p-2 bg-green-50 rounded">
                                  <div className="font-medium text-green-800">
                                    World Bank
                                  </div>
                                  <div className="text-green-600">
                                    Country Risk: {countryRisk?.riskScore || 50}
                                    %
                                  </div>
                                  <div className="text-green-600">
                                    Economic:{" "}
                                    {countryRisk?.economicStability || 50}%
                                  </div>
                                </div>
                                <div className="p-2 bg-orange-50 rounded">
                                  <div className="font-medium text-orange-800">
                                    Shippo Logistics
                                  </div>
                                  <div className="text-orange-600">
                                    Cost: $
                                    {Math.floor(Math.random() * 2000) + 2000}
                                  </div>
                                  <div className="text-orange-600">
                                    Transit:{" "}
                                    {Math.floor(Math.random() * 10) + 10} days
                                  </div>
                                </div>
                                <div className="p-2 bg-purple-50 rounded">
                                  <div className="font-medium text-purple-800">
                                    AI Assessment
                                  </div>
                                  <div className="text-purple-600">
                                    Confidence: 85%
                                  </div>
                                  <div className="text-purple-600">
                                    Risk Level: Medium
                                  </div>
                                </div>
                              </div>

                              {/* Government Contracting Potential */}
                              {samData.businessTypes.length > 0 && (
                                <div className="mb-3 p-2 bg-yellow-50 rounded">
                                  <div className="font-medium text-yellow-800 mb-1">
                                    🏛️ Government Contracting Potential
                                  </div>
                                  <div className="flex flex-wrap gap-1">
                                    {samData.businessTypes
                                      .slice(0, 2)
                                      .map((type, i) => (
                                        <Badge
                                          key={i}
                                          variant="outline"
                                          className="text-xs"
                                        >
                                          {type}
                                        </Badge>
                                      ))}
                                  </div>
                                  <div className="text-xs text-yellow-700 mt-1">
                                    Eligible for set-aside opportunities
                                  </div>
                                </div>
                              )}

                              {/* Enhanced Recommendations */}
                              <div className="space-y-1 text-xs">
                                <div className="font-medium text-gray-800">
                                  Multi-Source Recommendations:
                                </div>
                                <div className="text-blue-600">
                                  • {samData.recommendations[0]}
                                </div>
                                <div className="text-green-600">
                                  • Monitor{" "}
                                  {countryRisk?.countryName || "country"}{" "}
                                  economic indicators
                                </div>
                                <div className="text-orange-600">
                                  • Optimize logistics costs through route
                                  analysis
                                </div>
                                <div className="text-purple-600">
                                  • Consider for government contracting
                                  opportunities
                                </div>
                              </div>
                            </div>
                          );
                        },
                      )}
                    </div>
                  ) : (
                    <div className="text-center py-8">
                      <Users className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                      <p className="text-muted-foreground">
                        Upload product data to generate supplier intelligence
                        matrix
                      </p>
                    </div>
                  )}

                  {/* Federal Register Policy Intelligence */}
                  <div className="mt-6 p-4 bg-gray-50 rounded-lg">
                    <div className="flex items-center gap-2 mb-2">
                      <Globe className="h-4 w-4 text-gray-600" />
                      <span className="font-medium text-gray-800">
                        Policy Intelligence
                      </span>
                    </div>
                    <div className="text-sm text-gray-600">
                      Monitoring Federal Register for tariff and procurement
                      policy changes
                    </div>
                    <div className="text-xs text-gray-500 mt-1">
                      Last updated: {new Date().toLocaleDateString()} • 3
                      relevant documents tracked
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}

            <Card className="bg-card border-border shadow-lg rounded-xl">
              <CardHeader>
                <CardTitle>Supplier Comparison Matrix</CardTitle>
                <CardDescription>
                  Pre-populated supplier profiles - confirm or adjust critical
                  requirements only
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="h-[300px] flex items-center justify-center">
                  <div className="text-center">
                    <Users className="h-12 w-12 mx-auto text-muted-foreground mb-2" />
                    <p className="text-sm text-muted-foreground">
                      No suppliers configured. Add supplier data to compare
                      options.
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="risk" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Mock Country Risk Profiles */}
              <div className="space-y-4">
                {["China", "Mexico", "Vietnam", "India", "Thailand"].map((country, index) => {
                  const riskScore = Math.floor(Math.random() * 40) + 30; // 30-70%
                  const getRiskColor = (score: number) => {
                    if (score > 60)
                      return "text-red-600 bg-red-50 border-red-200";
                    if (score > 40)
                      return "text-yellow-600 bg-yellow-50 border-yellow-200";
                    return "text-green-600 bg-green-50 border-green-200";
                  };

                  return (
                    <div key={index} className="p-4 border rounded-lg">
                      <div className="flex items-center justify-between mb-2">
                        <div>
                          <h4 className="font-semibold">
                            {country}
                          </h4>
                          <p className="text-sm text-muted-foreground">
                            Asia Pacific • Middle Income
                          </p>
                        </div>
                        <Badge
                          className={getRiskColor(riskScore)}
                        >
                          Risk: {riskScore}%
                        </Badge>
                      </div>
                      <div className="grid grid-cols-3 gap-2 text-xs">
                        <div>
                          <span className="text-muted-foreground">
                            Economic:
                          </span>
                          <span className="ml-1 font-medium">
                            {Math.floor(Math.random() * 30) + 60}%
                          </span>
                        </div>
                        <div>
                          <span className="text-muted-foreground">
                            Political:
                          </span>
                          <span className="ml-1 font-medium">
                            {Math.floor(Math.random() * 30) + 50}%
                          </span>
                        </div>
                        <div>
                          <span className="text-muted-foreground">
                            Business:
                          </span>
                          <span className="ml-1 font-medium">
                            {Math.floor(Math.random() * 30) + 70}%
                          </span>
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>

              <Card className="bg-card border-border shadow-lg rounded-xl">
                <CardHeader>
                  <CardTitle>Supplier Risk Assessment</CardTitle>
                  <CardDescription>
                    AI-powered risk analysis using World Bank economic data
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  {externalData.supplierValidations.length > 0 && (
                    <div className="space-y-4">
                      {/* SAM.gov Validation Alerts */}
                      {externalData.supplierValidations.some(
                        (v) => v.samValidation?.exclusionStatus,
                      ) && (
                        <Alert className="bg-red-400/10 border-red-400/20">
                          <AlertTriangle className="h-4 w-4 text-red-400" />
                          <AlertDescription className="text-red-400">
                            {
                              externalData.supplierValidations.filter(
                                (v) => v.samValidation?.exclusionStatus,
                              ).length
                            }{" "}
                            supplier(s) found on SAM.gov exclusion list.
                            Immediate review required.
                          </AlertDescription>
                        </Alert>
                      )}

                      {externalData.supplierValidations.some(
                        (v) =>
                          v.samValidation?.riskFactors.registrationExpiring,
                      ) && (
                        <Alert className="bg-yellow-400/10 border-yellow-400/20">
                          <AlertTriangle className="h-4 w-4 text-yellow-400" />
                          <AlertDescription className="text-yellow-400">
                            {
                              externalData.supplierValidations.filter(
                                (v) =>
                                  v.samValidation?.riskFactors
                                    .registrationExpiring,
                              ).length
                            }{" "}
                            supplier(s) have registrations expiring within 90
                            days.
                          </AlertDescription>
                        </Alert>
                      )}

                      <Alert className="bg-yellow-400/10 border-yellow-400/20">
                        <AlertTriangle className="h-4 w-4 text-yellow-400" />
                        <AlertDescription className="text-yellow-400">
                          High concentration in Asian suppliers detected.
                          Consider diversification.
                        </AlertDescription>
                      </Alert>
                      <Alert className="bg-red-400/10 border-red-400/20">
                        <AlertTriangle className="h-4 w-4 text-red-400" />
                        <AlertDescription className="text-red-400">
                          65% of suppliers in high-tariff regions. Immediate
                          action recommended.
                        </AlertDescription>
                      </Alert>
                      <Alert className="bg-green-400/10 border-green-400/20">
                        <CheckCircle className="h-4 w-4 text-green-400" />
                        <AlertDescription className="text-green-400">
                          European suppliers showing strong reliability metrics.
                        </AlertDescription>
                      </Alert>
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="recommendations" className="space-y-6">
            <Card className="bg-card border-border shadow-lg rounded-xl">
              <CardHeader>
                <CardTitle>{t.aiRecommendations}</CardTitle>
                <CardDescription>
                  Machine learning recommendations for optimal supplier mix
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-4">
                    <h3 className="text-lg font-semibold flex items-center">
                      <Star className="h-5 w-5 mr-2 text-yellow-400" />
                      Top Recommendations
                    </h3>
                    <div className="space-y-3">
                      <div className="p-4 border border-border/30 rounded-lg">
                        <h4 className="font-medium">
                          Validate Suppliers with SAM.gov
                        </h4>
                        <p className="text-sm text-muted-foreground mt-1">
                          Ensure all suppliers are registered and compliant with
                          government requirements
                        </p>
                        <Badge className="mt-2" variant="default">
                          Critical
                        </Badge>
                      </div>
                      <div className="p-4 border border-border/30 rounded-lg">
                        <h4 className="font-medium">
                          Diversify to Latin America
                        </h4>
                        <p className="text-sm text-muted-foreground mt-1">
                          Add 2-3 suppliers from Mexico/Brazil to reduce tariff
                          exposure by 15%
                        </p>
                        <Badge className="mt-2" variant="default">
                          High Impact
                        </Badge>
                      </div>
                    </div>
                  </div>
                  <div className="space-y-4">
                    <h3 className="text-lg font-semibold flex items-center">
                      <TrendingUp className="h-5 w-5 mr-2 text-green-400" />
                      Potential Savings
                    </h3>
                    <div className="chart-container h-[200px] flex items-center justify-center">
                      <div className="text-center">
                        <div className="text-3xl font-bold text-green-400 mb-2">
                          $2.4M
                        </div>
                        <p className="text-muted-foreground">
                          Annual savings potential
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="performance" className="space-y-6">
            <Card className="bg-card border-border shadow-lg rounded-xl">
              <CardHeader>
                <CardTitle>Supplier Performance Tracking</CardTitle>
                <CardDescription>
                  Historical data and trend analysis for existing suppliers
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="chart-container h-[400px] flex items-center justify-center">
                  <div className="text-center">
                    <BarChart3 className="h-16 w-16 mx-auto text-primary mb-4" />
                    <p className="text-muted-foreground">
                      Performance Trends & Analytics
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>

        {/* Action Button for Workflow Navigation */}
        {onDataUpdate && (
          <div className="flex justify-center mt-8">
            <Button
              onClick={() => {
                onDataUpdate({
                  diversified: true,
                  preferences: preferences,
                  suppliers: filteredSuppliers,
                  timestamp: new Date().toISOString(),
                  diversificationScore: 73,
                  riskLevel: "Medium",
                  supplierCount: mockSuppliers.length,
                });
              }}
              className="bg-primary hover:bg-primary/90 px-8 py-2"
              size="lg"
            >
              {t.configureSettings}
            </Button>
          </div>
        )}
      </div>
    </div>
  );
};

const SupplierDiversification = (props: SupplierDiversificationProps) => {
  return (
    <DataProvider>
      <WorkflowProvider>
        <SupplierDiversificationContent {...props} />
      </WorkflowProvider>
    </DataProvider>
  );
};

export default SupplierDiversification;